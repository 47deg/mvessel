package com.fortysevendeg.android.sqlite.statement

import java.io.{InputStream, Reader}
import java.math.BigDecimal
import java.net.URL
import java.sql._
import java.util.Calendar

import com.fortysevendeg.android.sqlite.SQLDroidConnection
import com.fortysevendeg.android.sqlite.logging.{AndroidLogWrapper, LogWrapper}
import com.fortysevendeg.android.sqlite.resultset.SQLDroidResultSet

class SQLDroidPreparedStatement(
  sql: String,
  sqlDroidConnection: SQLDroidConnection,
  columnGenerated: Option[String] = None,
  logWrapper: LogWrapper = new AndroidLogWrapper())
  extends SQLDroidStatement(sqlDroidConnection, columnGenerated, logWrapper)
  with PreparedStatement {

  val notInPreparedErrorMessage = "This method cannot be called on a PreparedStatement"

  var arguments = new PreparedStatementArguments

  override def executeQuery(sql: String): ResultSet =
    throw new SQLException(notInPreparedErrorMessage)

  override def executeUpdate(sql: String): Int =
    throw new SQLException(notInPreparedErrorMessage)

  override def executeUpdate(sql: String, autoGeneratedKeys: Int): Int =
    throw new SQLException(notInPreparedErrorMessage)

  override def executeUpdate(sql: String, columnIndexes: scala.Array[Int]): Int =
    throw new SQLException(notInPreparedErrorMessage)

  override def executeUpdate(sql: String, columnNames: scala.Array[String]): Int =
    throw new SQLException(notInPreparedErrorMessage)

  override def execute(sql: String): Boolean =
    throw new SQLException(notInPreparedErrorMessage)

  override def execute(sql: String, autoGeneratedKeys: Int): Boolean =
    throw new SQLException(notInPreparedErrorMessage)

  override def execute(sql: String, columnIndexes: scala.Array[Int]): Boolean =
    throw new SQLException(notInPreparedErrorMessage)

  override def execute(sql: String, columnNames: scala.Array[String]): Boolean =
    throw new SQLException(notInPreparedErrorMessage)

  override def addBatch(sql: String): Unit =
    throw new SQLException(notInPreparedErrorMessage)

  override def addBatch(): Unit = arguments.addNewEntry()

  override def clearParameters(): Unit = arguments.clearArguments()

  override def execute(): Boolean = withOpenConnection { db =>
    resultSet = selectRegex.pattern.matcher(sql).matches() match {
      case true =>
        updateCount = None
        val limitedSql = maxRows map (m => s"$sql LIMIT $m") getOrElse sql
        Some(new SQLDroidResultSet(db.rawQuery(limitedSql)))
      case false =>
        db.execSQL(sql)
        updateCount = Option(db.changedRowCount())
        None
    }
    resultSet.isDefined
  }

  override def executeQuery(): ResultSet = ???

  override def executeUpdate(): Int = ???

  override def getMetaData: ResultSetMetaData = ???

  override def getParameterMetaData: ParameterMetaData = ???

  override def setArray(parameterIndex: Int, x: Array): Unit = ???

  override def setAsciiStream(parameterIndex: Int, x: InputStream): Unit = ???

  override def setAsciiStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

  override def setAsciiStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

  override def setBigDecimal(parameterIndex: Int, x: BigDecimal): Unit = ???

  override def setBinaryStream(parameterIndex: Int, x: InputStream): Unit = ???

  override def setBinaryStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

  override def setBinaryStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

  override def setBlob(parameterIndex: Int, inputStream: InputStream): Unit = ???

  override def setBlob(parameterIndex: Int, inputStream: InputStream, length: Long): Unit = ???

  override def setBlob(parameterIndex: Int, x: Blob): Unit = ???

  override def setBoolean(parameterIndex: Int, x: Boolean): Unit = ???

  override def setByte(parameterIndex: Int, x: Byte): Unit = ???

  override def setBytes(parameterIndex: Int, x: scala.Array[Byte]): Unit = ???

  override def setCharacterStream(parameterIndex: Int, reader: Reader): Unit = ???

  override def setCharacterStream(parameterIndex: Int, reader: Reader, length: Int): Unit = ???

  override def setCharacterStream(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

  override def setClob(parameterIndex: Int, reader: Reader): Unit = ???

  override def setClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

  override def setClob(parameterIndex: Int, x: Clob): Unit = ???

  override def setDate(parameterIndex: Int, x: Date): Unit = ???

  override def setDate(parameterIndex: Int, x: Date, cal: Calendar): Unit = ???

  override def setDouble(parameterIndex: Int, x: Double): Unit = ???

  override def setFloat(parameterIndex: Int, x: Float): Unit = ???

  override def setInt(parameterIndex: Int, x: Int): Unit = ???

  override def setLong(parameterIndex: Int, x: Long): Unit = ???

  override def setNCharacterStream(parameterIndex: Int, value: Reader): Unit = ???

  override def setNCharacterStream(parameterIndex: Int, value: Reader, length: Long): Unit = ???

  override def setNClob(parameterIndex: Int, reader: Reader): Unit = ???

  override def setNClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

  override def setNClob(parameterIndex: Int, value: NClob): Unit = ???

  override def setNString(parameterIndex: Int, value: String): Unit = ???

  override def setNull(parameterIndex: Int, sqlType: Int): Unit = ???

  override def setNull(parameterIndex: Int, sqlType: Int, typeName: String): Unit = ???

  override def setObject(parameterIndex: Int, x: scala.Any): Unit = ???

  override def setObject(parameterIndex: Int, x: scala.Any, targetSqlType: Int): Unit = ???

  override def setObject(parameterIndex: Int, x: scala.Any, targetSqlType: Int, scaleOrLength: Int): Unit = ???

  override def setRef(parameterIndex: Int, x: Ref): Unit = ???

  override def setRowId(parameterIndex: Int, x: RowId): Unit = ???

  override def setSQLXML(parameterIndex: Int, xmlObject: SQLXML): Unit = ???

  override def setShort(parameterIndex: Int, x: Short): Unit = ???

  override def setString(parameterIndex: Int, x: String): Unit = ???

  override def setTime(parameterIndex: Int, x: Time): Unit = ???

  override def setTime(parameterIndex: Int, x: Time, cal: Calendar): Unit = ???

  override def setTimestamp(parameterIndex: Int, x: Timestamp): Unit = ???

  override def setTimestamp(parameterIndex: Int, x: Timestamp, cal: Calendar): Unit = ???

  override def setURL(parameterIndex: Int, x: URL): Unit = ???

  override def setUnicodeStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???
}
