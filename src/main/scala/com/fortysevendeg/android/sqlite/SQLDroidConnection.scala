package com.fortysevendeg.android.sqlite

import java.sql._
import java.util.Properties
import java.util.concurrent.Executor

import com.fortysevendeg.android.sqlite.logging.{AndroidLogWrapper, LogWrapper}
import com.fortysevendeg.android.sqlite.metadata.SQLDroidDatabaseMetaData
import com.fortysevendeg.android.sqlite.statement.{SQLDroidPreparedStatement, SQLDroidStatement}

import scala.util.{Failure, Try, Success}

class SQLDroidConnection(
  databaseName: String,
  timeout: Long = 0,
  retryInterval: Int = 50,
  flags: Int = 0,
  val logWrapper: LogWrapper = new AndroidLogWrapper()
  ) extends Connection with WrapperNotSupported {

  protected def createDatabase(): Option[SQLDroidDatabase] =
    Some(new SQLDroidDatabase(databaseName, timeout, retryInterval, flags))

  protected def defaultAutoCommit(): Boolean = false

  private[this] def createPreparedStatement(
    sql: String,
    columnName: Option[String] = None
    ) = columnName match {
    case Some(c) => new SQLDroidPreparedStatement(sql, this, Some(c))
    case _ => new SQLDroidPreparedStatement(sql, this)
  }

  val rollbackSql = "rollback;"

  val closingErrorMessage = "Error closing database"

  val autoCommitErrorMessage = "Database is in auto-commit mode"

  val alreadyClosedErrorMessage = "Database connection closed"

  private[this] var sqliteDatabase: Option[SQLDroidDatabase] = createDatabase()

  private[this] var autoCommit: Boolean = defaultAutoCommit()

  override def close(): Unit = synchronized {
    sqliteDatabase match {
      case Some(db) =>
        logWrapper.logOnError(db.close(), closingErrorMessage)
        sqliteDatabase = None
      case _ =>
    }
  }

  override def commit(): Unit = withOpenDatabase { db =>
    autoCommit match {
      case true => throw new SQLException(autoCommitErrorMessage)
      case _ =>
        db.setTransactionSuccessful()
        db.endTransaction()
        db.beginTransaction()
    }
  }

  override def createStatement(): Statement = new SQLDroidStatement(this)

  override def getAutoCommit: Boolean = autoCommit

  override def setAutoCommit(autoCommit: Boolean): Unit = withOpenDatabase { db =>
    (this.autoCommit, autoCommit) match {
      case (false, true) =>
        db.setTransactionSuccessful()
        db.endTransaction()
        this.autoCommit = true
      case (true, false) =>
        db.beginTransaction()
        this.autoCommit = false
      case _ =>
    }
  }

  override def getMetaData: DatabaseMetaData = new SQLDroidDatabaseMetaData(this)

  override def isClosed: Boolean = sqliteDatabase match {
    case Some(db) => !db.database.isOpen
    case _ => true
  }

  override def nativeSQL(sql: String): String = sql

  override def prepareStatement(sql: String): PreparedStatement = createPreparedStatement(sql)

  override def prepareStatement(sql: String, columnNames: scala.Array[String]): PreparedStatement =
    Option(columnNames) match {
      case Some(scala.Array()) => createPreparedStatement(sql)
      case Some(scala.Array(columnName)) => createPreparedStatement(sql, Some(columnName))
      case None => createPreparedStatement(sql)
      case _ => logWrapper.notImplemented(javaNull)
    }

  override def rollback(): Unit = withOpenDatabase { db =>
    autoCommit match {
      case true => throw new SQLException(autoCommitErrorMessage)
      case _ =>
        db.execSQL(rollbackSql)
        db.endTransaction()
        db.beginTransaction()
    }
  }

  override def finalize() {
    logWrapper.i("Finalize SQLDroidConnection")
    if (!isClosed) close()
    super.finalize()
  }

  def withOpenDatabase[T](f: (SQLDroidDatabase) => T) = sqliteDatabase match {
    case Some(db) =>
      Try(f(db)) match {
        case Success(r) => r
        case Failure(e) => throw new SQLException(e)
      }
    case None =>
      throw new SQLException(alreadyClosedErrorMessage)
  }

  override def clearWarnings(): Unit = logWrapper.notImplemented(Unit)

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement =
    logWrapper.notImplemented(javaNull)

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement =
    logWrapper.notImplemented(javaNull)

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement =
    logWrapper.notImplemented(prepareStatement(sql))

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement =
    logWrapper.notImplemented(prepareStatement(sql))

  override def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement =
    logWrapper.notImplemented(prepareStatement(sql))

  override def prepareStatement(sql: String, columnIndexes: scala.Array[Int]): PreparedStatement =
    logWrapper.notImplemented(prepareStatement(sql))

  override def getCatalog: String = logWrapper.notImplemented(javaNull)

  override def getHoldability: Int = logWrapper.notImplemented(0)

  override def getTransactionIsolation: Int = logWrapper.notImplemented(0)

  override def getTypeMap: java.util.Map[String, Class[_]] = logWrapper.notImplemented(javaNull)

  override def getWarnings: SQLWarning = logWrapper.notImplemented(javaNull)

  override def isReadOnly: Boolean = logWrapper.notImplemented(false)

  override def prepareCall(sql: String): CallableStatement = logWrapper.notImplemented(javaNull)

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement =
    logWrapper.notImplemented(javaNull)

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement =
    logWrapper.notImplemented(javaNull)

  override def releaseSavepoint(savepoint: Savepoint): Unit = logWrapper.notImplemented(Unit)

  override def rollback(savepoint: Savepoint): Unit = logWrapper.notImplemented(Unit)

  override def setCatalog(catalog: String): Unit = logWrapper.notImplemented(Unit)

  override def setHoldability(holdability: Int): Unit = logWrapper.notImplemented(Unit)

  override def setReadOnly(readOnly: Boolean): Unit = logWrapper.notImplemented(Unit)

  override def setSavepoint(): Savepoint = logWrapper.notImplemented(javaNull)

  override def setSavepoint(name: String): Savepoint = logWrapper.notImplemented(javaNull)

  override def setTransactionIsolation(level: Int): Unit = logWrapper.notImplemented(Unit)

  override def setTypeMap(map: java.util.Map[String, Class[_]]): Unit = logWrapper.notImplemented(Unit)

  override def getNetworkTimeout: Int = logWrapper.notImplemented(0)

  override def createBlob(): Blob = logWrapper.notImplemented(javaNull)

  override def createSQLXML(): SQLXML = logWrapper.notImplemented(javaNull)

  override def createNClob(): NClob = logWrapper.notImplemented(javaNull)

  override def getClientInfo(name: String): String = logWrapper.notImplemented(javaNull)

  override def getClientInfo: Properties = logWrapper.notImplemented(javaNull)

  override def getSchema: String = logWrapper.notImplemented(javaNull)

  override def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = logWrapper.notImplemented(Unit)

  override def setClientInfo(name: String, value: String): Unit = logWrapper.notImplemented(Unit)

  override def setClientInfo(properties: Properties): Unit = logWrapper.notImplemented(Unit)

  override def createClob(): Clob = logWrapper.notImplemented(javaNull)

  override def createArrayOf(typeName: String, elements: scala.Array[AnyRef]): Array = logWrapper.notImplemented(javaNull)

  override def abort(executor: Executor): Unit = logWrapper.notImplemented(Unit)

  override def isValid(timeout: Int): Boolean = logWrapper.notImplemented(false)

  override def createStruct(typeName: String, attributes: scala.Array[AnyRef]): Struct = logWrapper.notImplemented(javaNull)

  override def setSchema(schema: String): Unit = logWrapper.notImplemented(Unit)
}

object SQLDroidConnection {

  val defaultTimeout = 0

  val defaultRetryInterval = 50

}